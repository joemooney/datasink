syntax = "proto3";

package datasink;

import "admin.proto";
import "crud.proto";

// DataSink is a unified gRPC service that combines both administrative
// and CRUD operations. It extends both AdminService and CrudService
// to provide a complete database interface.
service DataSink {
    // Administrative operations (from admin.proto)
    
    // CreateTable creates a new table with the specified schema.
    // Returns an error if the table already exists.
    rpc CreateTable(datasink.admin.CreateTableRequest) returns (datasink.admin.CreateTableResponse);
    
    // DropTable removes an existing table and all its data.
    // This operation is irreversible. Use with caution.
    rpc DropTable(datasink.admin.DropTableRequest) returns (datasink.admin.DropTableResponse);
    
    // GetServerStatus returns information about connected databases and server status.
    rpc GetServerStatus(datasink.admin.ServerStatusRequest) returns (datasink.admin.ServerStatusResponse);
    
    // AddDatabase adds a new database connection to the server.
    rpc AddDatabase(datasink.admin.AddDatabaseRequest) returns (datasink.admin.AddDatabaseResponse);
    
    // CRUD operations (from crud.proto)
    
    // Insert adds a single row to the specified table.
    // Returns the ID of the inserted row (if applicable).
    rpc Insert(datasink.crud.InsertRequest) returns (datasink.crud.InsertResponse);
    
    // Update modifies existing rows that match the WHERE clause.
    // Returns the number of affected rows.
    rpc Update(datasink.crud.UpdateRequest) returns (datasink.crud.UpdateResponse);
    
    // Delete removes rows that match the WHERE clause.
    // Returns the number of deleted rows.
    rpc Delete(datasink.crud.DeleteRequest) returns (datasink.crud.DeleteResponse);
    
    // Query executes a SQL query and returns results as a stream.
    // This allows efficient handling of large result sets without
    // loading all data into memory at once.
    // The first message in the stream contains column metadata.
    rpc Query(datasink.crud.QueryRequest) returns (stream datasink.crud.QueryResponse);
    
    // BatchInsert efficiently inserts multiple rows in a single transaction.
    // This is more efficient than multiple individual Insert calls.
    rpc BatchInsert(datasink.crud.BatchInsertRequest) returns (datasink.crud.BatchInsertResponse);
}